
SPRING SECURITY
===============================================================

    I. Enable Security
    -------------------------------------
        //1. pom.xml
        --------------
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        //will add the spring-security-core, spring-security-config, and spring- security-web dependencies
        //Note: Enables
        ----------------
            authentication with Basic authentication and form login
            enable HTTP headers for security
            Servlet API integration
            anonymous login 
            disable caching of resources.

        //default user, named user, with a random generated password, visible in the startup logs
            pass username and password in headers to access the end point
            http -a user:sadaksjkqweqwe :8080/books

        //2. Testing Controller with security enabled
        ----------------------------------------------
        Note: to test your controllers without security
        -------------------------------------------------
            @RunWith(SpringRunner.class)
            @WebMvcTest(value = BookController.class, secure = false) 
            //secure defaults to true
            public class BookControllerUnsecuredTest { ... }

        Note: //@WithMockUser,@WithAnonymousUser,@WithUserDetails

        //i. pom.xml
        -------------
            <dependency> 
                <groupId>org.springframework.security</groupId> 
                <artifactId>spring-security-test</artifactId> 
                <scope>test</scope>
            </dependency>

        //ii. Test Class
        -------------------------------------
        @RunWith(SpringRunner.class)
        @WebMvcTest(BookController.class) //security infrastructure will be automatically applied
        @WithMockUser //default user, with user as the username and password as the password. To test with current user, @WithMockUser or @WithUserDetails should be used
        public class BookControllerSecuredTest {

        @Test
        public void shouldAddBook() throws Exception {
            when(bookService.create(any(Book.class)))
            .thenReturn(new Book("123456789", "Test Book Stored", "T. Author"));
            mockMvc
            .perform(
                post("/books")
                .contentType(MediaType.APPLICATION_JSON)
                .content(
                    "{ \"isbn\" : \"123456789\"}, \"title\" : \"Test
                    Book\", \"authors\" : [\"T. Author\"]"
                )
                .with(csrf()) //adds the CSRF token to the request. Spring Security by default enables. CSRF2 protection. Uses CsrfRequestPostProcessor
            )
            .andExpect(status().isCreated())
            .andExpect(
                header().string("Location", "http://localhost/books/123456789")
            );
        }
        }

        //Integration Testing Security
        -------------------------------------
        Note: When running the test on an external port, @WithMockUser and with(csrf()) will not work. Need to use a  test client such as TestRestTemplate and/or WebTestClient(for WebFlux) 

            //A. using TestRestTemplate
            ----------------------------------
            @RunWith(SpringRunner.class)
            @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
            @TestPropertySource(properties = "spring.security.user.password=s3cr3t")
            //or in application.properties

            public class BookControllerIntegrationTest {

            @Autowired
            private TestRestTemplate testRestTemplate;

            @MockBean
            private BookService bookService;

            @Test
            public void shouldReturnListOfBooks() throws Exception {
                when(bookService.findAll())
                .thenReturn(
                    Arrays.asList(
                    new Book("123", "Spring 5 Recipes", "Marten Deinum", "Josh Long"),
                    new Book("321", "Pro Spring MVC", "Marten Deinum", "Colin Yates")
                    )
                );
                ResponseEntity<Book[]> books = testRestTemplate
                .withBasicAuth("user", "s3cr3t")
                .getForEntity("/books", Book[].class);
                assertThat(books.getStatusCode()).isEqualTo(HttpStatus.OK);
                assertThat(books.getBody()).hasSize(2);
            }
            }

            //B. Using WebTestClient
            -------------------------------------
            @RunWith(SpringRunner.class)
            @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
            @TestPropertySource(properties = "spring.security.user.password=s3cr3t")
            public class BookControllerIntegrationWebClientTest {

            @Autowired
            private WebTestClient webTestClient;

            @MockBean
            private BookService bookService;

            @Test
            public void shouldReturnListOfBooks() throws Exception {
                when(bookService.findAll())
                .thenReturn(
                    Arrays.asList(
                    new Book("123", "Spring 5 Recipes", "Marten Deinum", "Josh Long"),
                    new Book("321", "Pro Spring MVC", "Marten Deinum", "Colin Yates")
                    )
                );
                webTestClient
                .get()
                .uri("/books")
                .headers(headers -> headers.setBasicAuth("user", "s3cr3t"))
                .exchange()
                .expectStatus()
                .isOk()
                .expectBodyList(Book.class)
                .hasSize(2);
            }
            }






        


MESSAGING
===============================================================
    to use JMS in a Spring Boot application e.g ActiveMQ

    I. CONFIGURATION
    ==========================================
    ActiveMQ
    ---------------------------------------
        //1. pom.xml
        --------------
        <dependency> 
            <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-activemq</artifactId>
        </dependency>

        //2. ActiveMQ Configuration
        -------------------------------------
        spring.activemq.broker-url
        spring.activemq.user
        spring.activemq.password
        spring.activemq.in-memory //Should an embedded broker be used, default true. Ignored when spring.activemq.broker-url has been explicitly set
        spring.activemq.non-blocking-redelivery //Stop message delivery before redelivering rolled-back messages; when enabled message order will not be preserved!, default false
        spring.activemq.close-timeout Time to wait to consider a close to be effective, default 15 seconds
        spring.activemq.send-timeout //Time to wait for a response from the broker, default 0 (unlimited)
        spring.activemq.packages.trust-all //When using Java Serialization to send JMS messages should classes from all packages be trusted, default none 
        spring.activemq.packages.trusted //Comma-separated list of specific packages to trust

    Artemis
    ---------------------------------------

        //1. pom.xml
        --------------
        <dependency> 
            <groupId>org.springframework.boot</groupId> 
            <artifactId>spring-boot-starter-artemis</artifactId>
        </dependency>

        //2. Artemis Configuration
        -------------------------------------
        spring.artemis.host
        spring.artemis.port
        spring.artemis.user
        spring.artemis.password
        spring.artemis.mode // either native or embedded. default is none leading to auto-detection of the mode. When the embedded classes are found, will run in embedded mode

    JNDI based configuration
    -------------------------------------

        //1. pom.xml
        --------------
        <dependency> 
            <groupId>org.springframework</groupId> <artifactId>spring-jms</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.jms</groupId> 
            <artifactId>javax.jms-api</artifactId> <scope>provided</scope>
        </dependency>
        //jms-api will be supplied by your JEE container

        Note: Spring Boot will first try to detect the ConnectionFactory in the JNDI register under one of the well-known names java:/JmsXA and java:/ XAConnectionFactory or by the name specified in the spring.jms.jndi-name property

        spring.jms.jndi-name=java:/jms/connectionFactory

        Note: it will also automatically create a JndiDestinationResolver so that the queues and topics will also be detected in JNDI

        //2. Optional Manual Configuration
        -------------------------------------
            When Spring Boot cannot auto-configure your ConnectionFactory or Multiple ConnectionFactory instances are needed.

            @Bean
            public ConnectionFactory connectionFactory() {
            var connectionFactory = new ActiveMQConnectionFactory("vm://localhost?
            broker.persistent=false");
            connectionFactory.setClientID("someId");
            connectionFactory.setCloseTimeout(125);
            return connectionFactory;
            }

            Note: When Spring Boot detects a manually configured ConnectionFactory, it doesn't attempt to create one itself.

    II. Sending Messages Using JMS
    ==========================================
        When using Spring Boot, when it detects JMS and a single ConnectionFactory it will also automatically configure a JmsTemplate

        //1
        @Component
        class MessageSender {

        //Step A: Inject JmsTemplate
        private final JmsTemplate jms;

        MessageSender(JmsTemplate jms) {
            this.jms = jms;
        }

        @Scheduled(fixedRate = 1000)
        public void sendTime() {
            //Step B: Actual message sending
            jms.convertAndSend(
            "time-queue",
            "Current Date & Time is: " + LocalDateTime.now()
            );

            }
        }

        //2. Integration Testing
        -------------------------------------
        @RunWith(SpringRunner.class)
        @SpringBootTest
        public class JmsSenderApplicationTest {

            @Autowired
            private JmsTemplate jms;

            @Test
            public void shouldSendMessage() throws JMSException {
                Message message = jms.receive("time-queue");
                assertThat(message).isInstanceOf(TextMessage.class);
                assertThat(((TextMessage) message).getText())
                .startsWith("Current Date & Time is: ");
            }
        }

        //3. application.properties for integration test
        ------------------------------------------------
        spring.jms.template.receive-timeout=500ms 
        //default - indefinitely wait.

        //Configure the JmsTemplate
        -------------------------------------
        spring.jms.template.default-destination //default when a specific destination is not specified
        spring.jms.template.delivery-delay  //delivery delay for sending a message
        spring.jms.template.delivery-mode //persisent/non-persistent. Sets qos-enabled to true
        spring.jms.template.priority //priority of the message when sending. Default - none. Sets qos-enabled to true
        spring.jms.template.qos-enabled //default - false. When enabled the priority, delivery-mode, and time-to-live of a message will be set
        spring.jms.template.receive-timeout //Timeout to use for recieve calls. Default indefinite
        spring.jms.template.time-to-live //Time-to-live of a JMS message, when set sets qos-enabled to true
        spring.jms.pub-sub-domain //Default destination is a topic or queue? Default false meaning queue

        Note: JmsTemplate will also be auto-configured with a DestinationResolver and MessageConverter if a unique instance of the beans can be found. If no unique instance can be found, the defaults will be used, DynamicDestinationResolver and SimpleMessageConverter

        //Sending an object and Message Conversion
        -------------------------------------------
            var order = new Order(id, BigDecimal.valueOf(amount)); 
            jms.convertAndSend("orders", order);

            //Converting fails, as Order doesn’t implement Serializable, which is needed to convert the Order into an ObjectMessage
            OR
            use JSON - MappingJackson2MessageConverter is needed
            
            i. pom.xml
            ---------------
            <dependency> 
                <groupId>com.fasterxml.jackson.core</groupId> 
                <artifactId>jackson-core</artifactId>
            </dependency>

            ii. configure the MappingJackson2MessageConverter.
            ---------------------------------------------------
                @SpringBootApplication
                @EnableScheduling
                public class JmsSenderApplication {

                public static void main(String[] args) {
                    SpringApplication.run(JmsSenderApplication.class, args);
                }

                @Bean
                public MappingJackson2MessageConverter messageConverter() {
                    var messageConverter = new MappingJackson2MessageConverter();
                    //default - converts to BytesMessages
                    //messageConverter.setTargetType(MessageType.TEXT) --> JSON as a String as the payload

                    //default - FQN of the class 
                    messageConverter.setTypeIdPropertyName("content-type");

                    //default - FQN of the class 
                    messageConverter.setTypeIdMappings(
                    Collections.singletonMap("order", Order.class)
                    );
                    return messageConverter;
                }
                }

            iii. Integration Test
            -------------------------------------
                @RunWith(SpringRunner.class)
                @SpringBootTest
                public class JmsSenderApplicationTest {

                @Autowired
                private JmsTemplate jms;

                @Test
                //approach 1. Manual conversion
                public void shouldReceiveOrderPlain() throws Exception {
                    Message message = jms.receive("orders");
                    assertThat(message).isInstanceOf(BytesMessage.class);
                    BytesMessage msg = (BytesMessage) message;
                    ObjectMapper mapper = new ObjectMapper();
                    byte[] content = new byte[(int) msg.getBodyLength()];
                    msg.readBytes(content);
                    Order order = mapper.readValue(content, Order.class);
                    assertThat(order).hasNoNullFieldsOrProperties();
                }

                @Test
                //Good Approach : MappingJackson2MessageConverter converts the Order into a BytesMessages
                public void shouldReceiveOrderWithConversion() throws Exception {
                    Order order = (Order) jms.receiveAndConvert("orders");
                    System.out.println(order);
                    assertThat(order).hasNoNullFieldsOrProperties();
                }
                }
    III. Receive Messages Using JMS
    -------------------------------------
        Note: Create a class and annotate methods with @JmsListener to bind it to a destination 

        @Component
        class CurrentDateTimeService {
        @JmsListener(destination = "time-queue")
        public void handle(Message msg) throws JMSException {
            Assert.state(msg instanceof TextMessage, "Can only handle TextMessage.");
            System.out.println("[RECEIVED] - " + ((TextMessage) msg).getText());
        } }

        NIDHIN:: PENDING




SPRING BOOT ACTUATOR
===============================================================
Enable and Configure Spring Boot Actuator
-----------------------------------------
    //1. pom.xml
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    Note: Spring Boot will automatically set up the health and metrics based on the beans in the application context.
    DataSource,Hibernate, RabbitMQ, Caches, etc
    Note: Use jConsole to see the JMX endpoints
    Note: localhost:8080/actuator
        /actuator/health 
        /actuator/info

    //2. application.properties to enable more than health and info
    -----------------------------------------------------------
    management.endpoints.web.exposure.include=* //all endpoints
    management.endpoints.web.exposure.exclude=...

    //3. Management Server Properties for actuator configuration
    ------------------------------------------------------------
        management.server.add-application-context-header //X-Application-Context header to the response

        management.server.port //default server.port
        management.server.address //default server.address
        management.server.servlet.context-path //default /
        management.server.ssl.* //configure ssl

        e.g application.properties
        //Add the X-Application-Context header.
        management.server.add-application-context-header=true
        management.server.port=8090
        //http://localhost:8090/actuator

        Note: Only applicable for embedded server and not for external server

    //4. Configure Individual Management Endpoints
    -----------------------------------------------
        management.endpoint.<endpoint-name>.enabled //generally defaults to true
        management.endpoint.<endpoint-name>.cache.time-to-live //time to cache a response. defualt : 0
        management.endpoint.health.show-details //default - never, always, when-authorized
        management.endpoint.health.roles // used with when-authorized

    //5. Securing Management Endpoints
    -----------------------------------------------
        Note: When Spring Boot detects both Spring Boot Actuator and Spring Security, it will enable secure access to management endpoints automatically

        //pom.xml
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

    //6.Configure Healthchecks
    -------------------------------------
        http://localhost:8090/actuator/health
        Which HealthIndicators are present can be controlled by setting the management.health.<health-indicator>.enabled property

        management.health.diskspace.enabled=false

    //7. Configure Metrics
    -------------------------------------
      http://localhost:8090/actuator/metrics
      http://localhost:8090/actuator/metrics/{name-of-metric}
        http://localhost:8090/actuator/metrics/system.cpu.usage

      Note: Spring Boot uses micrometer.io1 to record metrics.
            Metrics are enabled by default for the features detected by Spring Boot. 

            //disabling metrics
            --------------------
            management.metrics.enable.system=false
            management.metrics.enable.tomcat=false

    //8. Create Custom Health Checks and Metrics
    ----------------------------------------------
        Note: beans of type HealthIndicator and MetricBinder are automatically registered

        //Option 1: extends AbstractHealthIndicator
        @Component
        class TaskSchedulerHealthIndicator extends AbstractHealthIndicator {

        private final ThreadPoolTaskScheduler taskScheduler;

        TaskSchedulerHealthIndicator(ThreadPoolTaskScheduler taskScheduler) {
            this.taskScheduler = taskScheduler;
        }

        @Override
        protected void doHealthCheck(Health.Builder builder) throws Exception {
            int poolSize = taskScheduler.getPoolSize();
            int active = taskScheduler.getActiveCount();
            int free = poolSize - active;
            builder
            .withDetail("active", taskScheduler.getActiveCount())
            .withDetail("poolsize", taskScheduler.getPoolSize());
            if (poolSize > 0 && free <= 1) {
            builder.down();
            } else {
            builder.up();
            }
        }
        }

        //Option 1: extends MeterBinder
        @Component
        class TaskSchedulerMetrics implements MeterBinder {

        private final ThreadPoolTaskScheduler taskScheduler;

        TaskSchedulerMetrics(ThreadPoolTaskScheduler taskScheduler) {
            this.taskScheduler = taskScheduler;
        }

        @Override
        public void bindTo(MeterRegistry registry) {
            FunctionCounter
            .builder(
                "task.scheduler.active",
                taskScheduler,
                ThreadPoolTaskScheduler::getActiveCount
            )
            .register(registry);
            FunctionCounter
            .builder(
                "task.scheduler.pool-size",
                taskScheduler,
                ThreadPoolTaskScheduler::getPoolSize
            )
            .register(registry);
        }
        }
    
    //9. export the metrics to an external system 
    ------------------------------------------------------
        like graphite,DataDog, Ganglia, or regular StatsD to create a dashboard to monitor 

        //1. pom.xml
        -------------
        <dependency>
            <groupId>io.micrometer</groupId> <artifactId>micrometer-registry-graphite</artifactId>
        </dependency>

        //2. export configuration
        -----------------------------------------------
            management.metrics.export.<registry-name>.enabled
            management.metrics.export.<registry-name>.host //host to send metrics to e.g graphite hostname
            management.metrics.export.<registry-name>.port //port to send metrics to e.g graphite port
            management.metrics.export.<registry-name>.step //how often to send metrics, default 1 minute
            management.metrics.export.<registry-name>.rate-units //Base time unit used to report rates, default seconds
            management.metrics.export.<registry-name>.duration-units //Base time unit used to report durations, default milliseconds

            e.g management.metrics.export.graphite.step=10s
            //To report the metrics every ten seconds

TASKSCHEDULER
===============================================================
    Adding @EnableScheduling is enough to have Spring Boot create a default TaskScheduler

PACKAGING
===============================================================
Create an Executable Archive
-------------------------------------

    <plugin>
    <groupId>org.springframework.boot</groupId> 
    <artifactId>spring-boot-maven-plugin</artifactId> 
    <configuration>
        <executable>true</executable> </configuration>
    </plugin>

    chmod +x your-application.jar

    head -n 290 your-application.jar

    Specifying Configuration
    -------------------------------------
        .conf file next to your executable archive (it must be named your-application.conf)
        //properties: MODE,USE_START_STOP_DAEMON,PID_FOLDER,LOG_FOLDER,CONF_FOLDER,LOG_FILENAME,APP_NAME,RUN_ARGS,JAVA_HOME,JAVA_OPTS,JARFILE,DEBUG,STOP_WAIT_TIME

        JAVA_OPTS=-Xmx1024m //assign a maximum of 1GB of memory to your application

Create a WAR for Deployment
-------------------------------------
    Note: options from the server and management.servlet namespaces don’t apply anymore. So when a server.port has been defined, it will be ignored
    http://<name-of-server>:8080/<name-of-war>

    //1.pom.xml
    <packaging>war</packaging>

    //2.pom.xml
    <dependency> 
        <groupId>org.springframework.boot</groupId> 
        <artifactId>spring-boot-starter-tomcat</artifactId> 
        <scope>provided</scope>
    </dependency>
    //Spring Boot plugin will not add the libraries to the default WEB-INF/lib --instead WEB-INF/lib-provided directory

    //3 application to extend the SpringBootServletInitializer AND override the configure method.
    @SpringBootApplication
    public class HelloWorldApplication extends SpringBootServletInitializer {

    public static void main(String[] args) {
        SpringApplication.run(HelloWorldApplication.class, args);
    }

    @Override
    protected SpringApplicationBuilder configure(
        SpringApplicationBuilder builder
    ) {
        return builder.sources(HelloWorldApplication.class);
    }
    }

Reduce Archive Size Through the ThinLauncher
--------------------------------------------
    Note: default -> fat JAR, a JAR with all the dependencies 
        BOOT-INF/lib
    Thin Launcher -> custom layout.dependencies will be downloaded before starting the application ==> Slow startup
    class named ThinJarWrapper -> entrypoint of your application
        pom.xml and/ or a META-INF/thin.properties to determine the dependencies
        will locate another JAR file (the “launcher”).
            create a custom class loader with all the downloaded dependencies on the classpath. Then it runs the application’s own main method with that class loader.

    Note: thin.repo in the META-INF/thin. properties to point to the mirror like Nexus
    //pom.xml
    <plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <dependencies>
        <dependency>
        <groupId>org.springframework.boot.experimental</groupId>
        <artifactId>spring-boot-thin-layout</artifactId>
        <version>1.0.15.RELEASE</version>
        </dependency>
    </dependencies>
    </plugin>

    Using Docker
    -------------------------------------
    //1. dockerfile-maven-plugin from Spotify
    <plugin>
    <groupId>com.spotify</groupId>
    <artifactId>dockerfile-maven-plugin</artifactId>
    <version>1.4.4</version>
    <configuration>
        <repository>spring-boot-recipes/${project.name}</repository>
        <tag>${project.version}</tag>
        <buildArgs>
        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
        </buildArgs>
    </configuration>
    <dependencies>
        <dependency>
        <groupId>javax.activation</groupId>
        <artifactId>javax.activation-api</artifactId>
        <version>1.2.0</version>
        </dependency>
        <dependency>
        <groupId>org.codehaus.plexus</groupId>
        <artifactId>plexus-archiver</artifactId>
        <version>3.6.0</version>
        </dependency>
    </dependencies>
    </plugin>

    Note:  
    name of the image - repository property
    ${project.version} - the tag
    plexus-archiver - default version with Maven doesn’t work on Java 9+.
    javax.activation-api - not available in java 9 

    //2. Dockerfile in the root of the project.
    FROM openjdk:11-jre-slim
    VOLUME /tmp
    ARG JAR_FILE
    COPY ${JAR_FILE} app.jar
    ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]

    //3. Generate the docker container
    mvn clean build dockerfile:build 

    //4. launch the container
    docker run -d spring-boot-recipes/dockerize:2.0.0-SNAPSHOT
    //with profile properties -e switch
    docker run -d -e SPRING_PROFILES_ACTIVE='Prod' spring-boot-recipes/dockerize:2.0.0-SNAPSHOT

    Note: -e switch
    //5. logs
    docker logs <name-of-container> --follow 

    


